- id: 1
  question: "Two Sum"
  description: "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target."
  example: "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1]."
  solution: |
    ```javascript
    function twoSum(nums, target) {
      const map = new Map();
      for (let i = 0; i < nums.length; i++) {
        const complement = target - nums[i];
        if (map.has(complement)) {
          return [map.get(complement), i];
        }
        map.set(nums[i], i);
      }
      return [];
    }
    ```
  difficulty: "Easy"
  tags: ["Array", "Hash Table"]

- id: 2
  question: "Add Two Numbers"
  description: "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list."
  example: "Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807."
  solution: |
    ```javascript
    function addTwoNumbers(l1, l2) {
      let dummyHead = new ListNode(0);
      let curr = dummyHead;
      let carry = 0;

      while (l1 || l2) {
        let x = l1 ? l1.val : 0;
        let y = l2 ? l2.val : 0;
        let sum = x + y + carry;

        carry = Math.floor(sum / 10);
        curr.next = new ListNode(sum % 10);
        curr = curr.next;

        if (l1) l1 = l1.next;
        if (l2) l2 = l2.next;
      }

      if (carry > 0) {
        curr.next = new ListNode(carry);
      }

      return dummyHead.next;
    }
    ```
  difficulty: "Medium"
  tags: ["Linked List", "Math", "Recursion"]

- id: 3
  question: "Longest Substring Without Repeating Characters"
  description: "Given a string s, find the length of the longest substring without repeating characters."
  example: "Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3."
  solution: |
    ```javascript
    function lengthOfLongestSubstring(s) {
      let maxLength = 0;
      let start = 0;
      const charMap = new Map();

      for (let end = 0; end < s.length; end++) {
        const currentChar = s[end];

        if (charMap.has(currentChar)) {
          start = Math.max(start, charMap.get(currentChar) + 1);
        }

        charMap.set(currentChar, end);
        maxLength = Math.max(maxLength, end - start + 1);
      }

      return maxLength;
    }
    ```
  difficulty: "Medium"
  tags: ["Hash Table", "String", "Sliding Window"]

- id: 4
  question: "Median of Two Sorted Arrays"
  description: "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays."
  example: "Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2."
  solution: |
    ```javascript
    function findMedianSortedArrays(nums1, nums2) {
      if (nums1.length > nums2.length) {
        [nums1, nums2] = [nums2, nums1];
      }

      const x = nums1.length;
      const y = nums2.length;
      let low = 0;
      let high = x;

      while (low <= high) {
        const partitionX = Math.floor((low + high) / 2);
        const partitionY = Math.floor((x + y + 1) / 2) - partitionX;

        const maxX = partitionX === 0 ? Number.NEGATIVE_INFINITY : nums1[partitionX - 1];
        const maxY = partitionY === 0 ? Number.NEGATIVE_INFINITY : nums2[partitionY - 1];

        const minX = partitionX === x ? Number.POSITIVE_INFINITY : nums1[partitionX];
        const minY = partitionY === y ? Number.POSITIVE_INFINITY : nums2[partitionY];

        if (maxX <= minY && maxY <= minX) {
          const lowMax = Math.max(maxX, maxY);

          if ((x + y) % 2 !== 0) {
            return lowMax;
          }

          return (lowMax + Math.min(minX, minY)) / 2;
        } else if (maxX > minY) {
          high = partitionX - 1;
        } else {
          low = partitionX + 1;
        }
      }
    }
    ```
  difficulty: "Hard"
  tags: ["Array", "Binary Search", "Divide and Conquer"]

- id: 5
  question: "Longest Palindromic Substring"
  description: "Given a string s, return the longest palindromic substring in s."
  example: "Input: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer."
  solution: |
    ```javascript
    function longestPalindrome(s) {
      if (!s || s.length < 1) return "";

      let start = 0;
      let maxLength = 1;

      function expandAroundCenter(left, right) {
        while (left >= 0 && right < s.length && s[left] === s[right]) {
          const currentLength = right - left + 1;
          if (currentLength > maxLength) {
            maxLength = currentLength;
            start = left;
          }
          left--;
          right++;
        }
      }

      for (let i = 0; i < s.length; i++) {
        expandAroundCenter(i, i);     // For odd length palindromes
        expandAroundCenter(i, i + 1); // For even length palindromes
      }

      return s.substring(start, start + maxLength);
    }
    ```
  difficulty: "Medium"
  tags: ["String", "Dynamic Programming"]
